// Code generated by Wire protocol buffer compiler, do not edit.
// Source: grpc.testing.ClientConfigureRequest in grpc/testing/messages.proto
import Foundation
import Wire

/**
 *  Configurations for a test client.
 */
public struct ClientConfigureRequest {

    /**
     *  The types of RPCs the client sends.
     */
    public var types: [RpcType]
    /**
     *  The collection of custom metadata to be attached to RPCs sent by the client.
     */
    public var metadata: [Metadata]
    /**
     *  The deadline to use, in seconds, for all RPCs.  If unset or zero, the
     *  client will use the default from the command-line.
     */
    public var timeout_sec: Int32
    public var unknownFields: Data = .init()

    public init(
        types: [RpcType] = [],
        metadata: [Metadata] = [],
        timeout_sec: Int32
    ) {
        self.types = types
        self.metadata = metadata
        self.timeout_sec = timeout_sec
    }

    /**
     *  Metadata to be attached for the given type of RPCs.
     */
    public struct Metadata {

        public var type: RpcType
        public var key: String
        public var value: String
        public var unknownFields: Data = .init()

        public init(
            type: RpcType,
            key: String,
            value: String
        ) {
            self.type = type
            self.key = key
            self.value = value
        }

    }

    /**
     *  Type of RPCs to send.
     */
    public enum RpcType : UInt32, CaseIterable, Codable {

        case EMPTY_CALL = 0
        case UNARY_CALL = 1

    }

}

#if !WIRE_REMOVE_EQUATABLE
extension ClientConfigureRequest.Metadata : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension ClientConfigureRequest.Metadata : Hashable {
}
#endif

extension ClientConfigureRequest.Metadata : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/grpc.testing.ClientConfigureRequest.Metadata"
    }
}

extension ClientConfigureRequest.Metadata : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var type: ClientConfigureRequest.RpcType? = nil
        var key: String? = nil
        var value: String? = nil

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: type = try reader.decode(ClientConfigureRequest.RpcType.self)
            case 2: key = try reader.decode(String.self)
            case 3: value = try reader.decode(String.self)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.type = try ClientConfigureRequest.Metadata.checkIfMissing(type, "type")
        self.key = try ClientConfigureRequest.Metadata.checkIfMissing(key, "key")
        self.value = try ClientConfigureRequest.Metadata.checkIfMissing(value, "value")
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.type)
        try writer.encode(tag: 2, value: self.key)
        try writer.encode(tag: 3, value: self.value)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension ClientConfigureRequest.Metadata : Codable {
    public enum CodingKeys : String, CodingKey {

        case type
        case key
        case value

    }
}
#endif

#if !WIRE_REMOVE_EQUATABLE
extension ClientConfigureRequest : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension ClientConfigureRequest : Hashable {
}
#endif

extension ClientConfigureRequest : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/grpc.testing.ClientConfigureRequest"
    }
}

extension ClientConfigureRequest : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var types: [ClientConfigureRequest.RpcType] = []
        var metadata: [ClientConfigureRequest.Metadata] = []
        var timeout_sec: Int32? = nil

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: try reader.decode(into: &types)
            case 2: try reader.decode(into: &metadata)
            case 3: timeout_sec = try reader.decode(Int32.self)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.types = types
        self.metadata = metadata
        self.timeout_sec = try ClientConfigureRequest.checkIfMissing(timeout_sec, "timeout_sec")
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.types)
        try writer.encode(tag: 2, value: self.metadata)
        try writer.encode(tag: 3, value: self.timeout_sec)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension ClientConfigureRequest : Codable {
    public enum CodingKeys : String, CodingKey {

        case types
        case metadata
        case timeout_sec

    }
}
#endif
