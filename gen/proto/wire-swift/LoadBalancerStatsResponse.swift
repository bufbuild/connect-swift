// Code generated by Wire protocol buffer compiler, do not edit.
// Source: grpc.testing.LoadBalancerStatsResponse in grpc/testing/messages.proto
import Foundation
import Wire

public struct LoadBalancerStatsResponse {

    /**
     *  The number of completed RPCs for each peer.
     */
    public var rpcs_by_peer: [String : Int32]
    /**
     *  The number of RPCs that failed to record a remote peer.
     */
    public var num_failures: Int32
    public var rpcs_by_method: [String : RpcsByPeer]
    public var unknownFields: Data = .init()

    public init(
        rpcs_by_peer: [String : Int32] = [:],
        num_failures: Int32,
        rpcs_by_method: [String : RpcsByPeer] = [:]
    ) {
        self.rpcs_by_peer = rpcs_by_peer
        self.num_failures = num_failures
        self.rpcs_by_method = rpcs_by_method
    }

    public struct RpcsByPeer {

        /**
         *  The number of completed RPCs for each peer.
         */
        public var rpcs_by_peer: [String : Int32]
        public var unknownFields: Data = .init()

        public init(rpcs_by_peer: [String : Int32] = [:]) {
            self.rpcs_by_peer = rpcs_by_peer
        }

    }

}

#if !WIRE_REMOVE_EQUATABLE
extension LoadBalancerStatsResponse.RpcsByPeer : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension LoadBalancerStatsResponse.RpcsByPeer : Hashable {
}
#endif

extension LoadBalancerStatsResponse.RpcsByPeer : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/grpc.testing.LoadBalancerStatsResponse.RpcsByPeer"
    }
}

extension LoadBalancerStatsResponse.RpcsByPeer : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var rpcs_by_peer: [String : Int32] = [:]

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: try reader.decode(into: &rpcs_by_peer)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.rpcs_by_peer = rpcs_by_peer
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.rpcs_by_peer)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension LoadBalancerStatsResponse.RpcsByPeer : Codable {
    public enum CodingKeys : String, CodingKey {

        case rpcs_by_peer

    }
}
#endif

#if !WIRE_REMOVE_EQUATABLE
extension LoadBalancerStatsResponse : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension LoadBalancerStatsResponse : Hashable {
}
#endif

extension LoadBalancerStatsResponse : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/grpc.testing.LoadBalancerStatsResponse"
    }
}

extension LoadBalancerStatsResponse : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var rpcs_by_peer: [String : Int32] = [:]
        var num_failures: Int32? = nil
        var rpcs_by_method: [String : LoadBalancerStatsResponse.RpcsByPeer] = [:]

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: try reader.decode(into: &rpcs_by_peer)
            case 2: num_failures = try reader.decode(Int32.self)
            case 3: try reader.decode(into: &rpcs_by_method)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.rpcs_by_peer = rpcs_by_peer
        self.num_failures = try LoadBalancerStatsResponse.checkIfMissing(num_failures, "num_failures")
        self.rpcs_by_method = rpcs_by_method
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.rpcs_by_peer)
        try writer.encode(tag: 2, value: self.num_failures)
        try writer.encode(tag: 3, value: self.rpcs_by_method)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension LoadBalancerStatsResponse : Codable {
    public enum CodingKeys : String, CodingKey {

        case rpcs_by_peer
        case num_failures
        case rpcs_by_method

    }
}
#endif
