// Code generated by Wire protocol buffer compiler, do not edit.
// Source: grpc.testing.ErrorDetail in grpc/testing/messages.proto
import Foundation
import Wire

public struct ErrorDetail {

    public var reason: String
    public var domain: String
    public var unknownFields: Data = .init()

    public init(reason: String, domain: String) {
        self.reason = reason
        self.domain = domain
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension ErrorDetail : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension ErrorDetail : Hashable {
}
#endif

extension ErrorDetail : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/grpc.testing.ErrorDetail"
    }
}

extension ErrorDetail : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var reason: String? = nil
        var domain: String? = nil

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: reason = try reader.decode(String.self)
            case 2: domain = try reader.decode(String.self)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.reason = try ErrorDetail.checkIfMissing(reason, "reason")
        self.domain = try ErrorDetail.checkIfMissing(domain, "domain")
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.reason)
        try writer.encode(tag: 2, value: self.domain)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension ErrorDetail : Codable {
    public enum CodingKeys : String, CodingKey {

        case reason
        case domain

    }
}
#endif
