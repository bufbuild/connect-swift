// Code generated by Wire protocol buffer compiler, do not edit.
// Source: grpc.testing.StreamingInputCallRequest in grpc/testing/messages.proto
import Foundation
import Wire

/**
 *  Client-streaming request.
 */
public struct StreamingInputCallRequest {

    /**
     *  Optional input payload sent along with the request.
     */
    public var payload: Payload?
    /**
     *  Whether the server should expect this request to be compressed. This field
     *  is "nullable" in order to interoperate seamlessly with servers not able to
     *  implement the full compression tests by introspecting the call to verify
     *  the request's compression status.
     */
    public var expect_compressed: BoolValue?
    public var unknownFields: Data = .init()

    public init(payload: Payload? = nil, expect_compressed: BoolValue? = nil) {
        self.payload = payload
        self.expect_compressed = expect_compressed
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension StreamingInputCallRequest : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension StreamingInputCallRequest : Hashable {
}
#endif

extension StreamingInputCallRequest : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/grpc.testing.StreamingInputCallRequest"
    }
}

extension StreamingInputCallRequest : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var payload: Payload? = nil
        var expect_compressed: BoolValue? = nil

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: payload = try reader.decode(Payload.self)
            case 2: expect_compressed = try reader.decode(BoolValue.self)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.payload = payload
        self.expect_compressed = expect_compressed
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.payload)
        try writer.encode(tag: 2, value: self.expect_compressed)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension StreamingInputCallRequest : Codable {
    public enum CodingKeys : String, CodingKey {

        case payload
        case expect_compressed

    }
}
#endif
