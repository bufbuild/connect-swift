// Code generated by Wire protocol buffer compiler, do not edit.
// Source: grpc.testing.EchoStatus in grpc/testing/messages.proto
import Foundation
import Wire

/**
 *  A protobuf representation for grpc status. This is used by test
 *  clients to specify a status that the server should attempt to return.
 */
public struct EchoStatus {

    public var code: Int32
    public var message: String
    public var unknownFields: Data = .init()

    public init(code: Int32, message: String) {
        self.code = code
        self.message = message
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension EchoStatus : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension EchoStatus : Hashable {
}
#endif

extension EchoStatus : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/grpc.testing.EchoStatus"
    }
}

extension EchoStatus : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var code: Int32? = nil
        var message: String? = nil

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: code = try reader.decode(Int32.self)
            case 2: message = try reader.decode(String.self)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.code = try EchoStatus.checkIfMissing(code, "code")
        self.message = try EchoStatus.checkIfMissing(message, "message")
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.code)
        try writer.encode(tag: 2, value: self.message)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension EchoStatus : Codable {
    public enum CodingKeys : String, CodingKey {

        case code
        case message

    }
}
#endif
