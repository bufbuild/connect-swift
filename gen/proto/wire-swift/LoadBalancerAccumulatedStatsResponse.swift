// Code generated by Wire protocol buffer compiler, do not edit.
// Source: grpc.testing.LoadBalancerAccumulatedStatsResponse in grpc/testing/messages.proto
import Foundation
import Wire

/**
 *  Accumulated stats for RPCs sent by a test client.
 */
public struct LoadBalancerAccumulatedStatsResponse {

    /**
     *  The total number of RPCs have ever issued for each type.
     *  Deprecated: use stats_per_method.rpcs_started instead.
     */
    @available(*, deprecated)
    public var num_rpcs_started_by_method: [String : Int32]
    /**
     *  The total number of RPCs have ever completed successfully for each type.
     *  Deprecated: use stats_per_method.result instead.
     */
    @available(*, deprecated)
    public var num_rpcs_succeeded_by_method: [String : Int32]
    /**
     *  The total number of RPCs have ever failed for each type.
     *  Deprecated: use stats_per_method.result instead.
     */
    @available(*, deprecated)
    public var num_rpcs_failed_by_method: [String : Int32]
    /**
     *  Per-method RPC statistics.  The key is the RpcType in string form; e.g.
     *  'EMPTY_CALL' or 'UNARY_CALL'
     */
    public var stats_per_method: [String : MethodStats]
    public var unknownFields: Data = .init()

    public init(
        num_rpcs_started_by_method: [String : Int32] = [:],
        num_rpcs_succeeded_by_method: [String : Int32] = [:],
        num_rpcs_failed_by_method: [String : Int32] = [:],
        stats_per_method: [String : MethodStats] = [:]
    ) {
        self.num_rpcs_started_by_method = num_rpcs_started_by_method
        self.num_rpcs_succeeded_by_method = num_rpcs_succeeded_by_method
        self.num_rpcs_failed_by_method = num_rpcs_failed_by_method
        self.stats_per_method = stats_per_method
    }

    public struct MethodStats {

        /**
         *  The number of RPCs that were started for this method.
         */
        public var rpcs_started: Int32
        /**
         *  The number of RPCs that completed with each status for this method.  The
         *  key is the integral value of a google.rpc.Code; the value is the count.
         */
        public var result: [Int32 : Int32]
        public var unknownFields: Data = .init()

        public init(rpcs_started: Int32, result: [Int32 : Int32] = [:]) {
            self.rpcs_started = rpcs_started
            self.result = result
        }

    }

}

#if !WIRE_REMOVE_EQUATABLE
extension LoadBalancerAccumulatedStatsResponse.MethodStats : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension LoadBalancerAccumulatedStatsResponse.MethodStats : Hashable {
}
#endif

extension LoadBalancerAccumulatedStatsResponse.MethodStats : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/grpc.testing.LoadBalancerAccumulatedStatsResponse.MethodStats"
    }
}

extension LoadBalancerAccumulatedStatsResponse.MethodStats : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var rpcs_started: Int32? = nil
        var result: [Int32 : Int32] = [:]

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: rpcs_started = try reader.decode(Int32.self)
            case 2: try reader.decode(into: &result)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.rpcs_started = try LoadBalancerAccumulatedStatsResponse.MethodStats.checkIfMissing(rpcs_started, "rpcs_started")
        self.result = result
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.rpcs_started)
        try writer.encode(tag: 2, value: self.result)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension LoadBalancerAccumulatedStatsResponse.MethodStats : Codable {
    public enum CodingKeys : String, CodingKey {

        case rpcs_started
        case result

    }
}
#endif

#if !WIRE_REMOVE_EQUATABLE
extension LoadBalancerAccumulatedStatsResponse : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension LoadBalancerAccumulatedStatsResponse : Hashable {
}
#endif

extension LoadBalancerAccumulatedStatsResponse : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/grpc.testing.LoadBalancerAccumulatedStatsResponse"
    }
}

extension LoadBalancerAccumulatedStatsResponse : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var num_rpcs_started_by_method: [String : Int32] = [:]
        var num_rpcs_succeeded_by_method: [String : Int32] = [:]
        var num_rpcs_failed_by_method: [String : Int32] = [:]
        var stats_per_method: [String : LoadBalancerAccumulatedStatsResponse.MethodStats] = [:]

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: try reader.decode(into: &num_rpcs_started_by_method)
            case 2: try reader.decode(into: &num_rpcs_succeeded_by_method)
            case 3: try reader.decode(into: &num_rpcs_failed_by_method)
            case 4: try reader.decode(into: &stats_per_method)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.num_rpcs_started_by_method = num_rpcs_started_by_method
        self.num_rpcs_succeeded_by_method = num_rpcs_succeeded_by_method
        self.num_rpcs_failed_by_method = num_rpcs_failed_by_method
        self.stats_per_method = stats_per_method
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.num_rpcs_started_by_method)
        try writer.encode(tag: 2, value: self.num_rpcs_succeeded_by_method)
        try writer.encode(tag: 3, value: self.num_rpcs_failed_by_method)
        try writer.encode(tag: 4, value: self.stats_per_method)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension LoadBalancerAccumulatedStatsResponse : Codable {
    public enum CodingKeys : String, CodingKey {

        case num_rpcs_started_by_method
        case num_rpcs_succeeded_by_method
        case num_rpcs_failed_by_method
        case stats_per_method

    }
}
#endif
