// Code generated by Wire protocol buffer compiler, do not edit.
// Source: grpc.testing.StreamingInputCallResponse in grpc/testing/messages.proto
import Foundation
import Wire

/**
 *  Client-streaming response.
 */
public struct StreamingInputCallResponse {

    /**
     *  Aggregated size of payloads received from the client.
     */
    public var aggregated_payload_size: Int32
    public var unknownFields: Data = .init()

    public init(aggregated_payload_size: Int32) {
        self.aggregated_payload_size = aggregated_payload_size
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension StreamingInputCallResponse : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension StreamingInputCallResponse : Hashable {
}
#endif

extension StreamingInputCallResponse : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/grpc.testing.StreamingInputCallResponse"
    }
}

extension StreamingInputCallResponse : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var aggregated_payload_size: Int32? = nil

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: aggregated_payload_size = try reader.decode(Int32.self)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.aggregated_payload_size = try StreamingInputCallResponse.checkIfMissing(aggregated_payload_size, "aggregated_payload_size")
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.aggregated_payload_size)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension StreamingInputCallResponse : Codable {
    public enum CodingKeys : String, CodingKey {

        case aggregated_payload_size

    }
}
#endif
