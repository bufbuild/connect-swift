// Code generated by Wire protocol buffer compiler, do not edit.
// Source: grpc.testing.ResponseParameters in grpc/testing/messages.proto
import Foundation
import Wire

/**
 *  Configuration for a particular response.
 */
public struct ResponseParameters {

    /**
     *  Desired payload sizes in responses from the server.
     */
    public var size: Int32
    /**
     *  Desired interval between consecutive responses in the response stream in
     *  microseconds.
     */
    public var interval_us: Int32
    /**
     *  Whether to request the server to compress the response. This field is
     *  "nullable" in order to interoperate seamlessly with clients not able to
     *  implement the full compression tests by introspecting the call to verify
     *  the response's compression status.
     */
    public var compressed: BoolValue?
    public var unknownFields: Data = .init()

    public init(
        size: Int32,
        interval_us: Int32,
        compressed: BoolValue? = nil
    ) {
        self.size = size
        self.interval_us = interval_us
        self.compressed = compressed
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension ResponseParameters : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension ResponseParameters : Hashable {
}
#endif

extension ResponseParameters : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/grpc.testing.ResponseParameters"
    }
}

extension ResponseParameters : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var size: Int32? = nil
        var interval_us: Int32? = nil
        var compressed: BoolValue? = nil

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: size = try reader.decode(Int32.self)
            case 2: interval_us = try reader.decode(Int32.self)
            case 3: compressed = try reader.decode(BoolValue.self)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.size = try ResponseParameters.checkIfMissing(size, "size")
        self.interval_us = try ResponseParameters.checkIfMissing(interval_us, "interval_us")
        self.compressed = compressed
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.size)
        try writer.encode(tag: 2, value: self.interval_us)
        try writer.encode(tag: 3, value: self.compressed)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension ResponseParameters : Codable {
    public enum CodingKeys : String, CodingKey {

        case size
        case interval_us
        case compressed

    }
}
#endif
