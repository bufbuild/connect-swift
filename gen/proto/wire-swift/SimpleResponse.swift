// Code generated by Wire protocol buffer compiler, do not edit.
// Source: grpc.testing.SimpleResponse in grpc/testing/messages.proto
import Foundation
import Wire

/**
 *  Unary response, as configured by the request.
 */
public struct SimpleResponse {

    /**
     *  Payload to increase message size.
     */
    public var payload: Payload?
    /**
     *  The user the request came from, for verifying authentication was
     *  successful when the client expected it.
     */
    public var username: String
    /**
     *  OAuth scope.
     */
    public var oauth_scope: String
    /**
     *  Server ID. This must be unique among different server instances,
     *  but the same across all RPC's made to a particular server instance.
     */
    public var server_id: String
    /**
     *  gRPCLB Path.
     */
    public var grpclb_route_type: GrpclbRouteType
    /**
     *  Server hostname.
     */
    public var hostname: String
    public var unknownFields: Data = .init()

    public init(
        payload: Payload? = nil,
        username: String,
        oauth_scope: String,
        server_id: String,
        grpclb_route_type: GrpclbRouteType,
        hostname: String
    ) {
        self.payload = payload
        self.username = username
        self.oauth_scope = oauth_scope
        self.server_id = server_id
        self.grpclb_route_type = grpclb_route_type
        self.hostname = hostname
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension SimpleResponse : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension SimpleResponse : Hashable {
}
#endif

extension SimpleResponse : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/grpc.testing.SimpleResponse"
    }
}

extension SimpleResponse : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var payload: Payload? = nil
        var username: String? = nil
        var oauth_scope: String? = nil
        var server_id: String? = nil
        var grpclb_route_type: GrpclbRouteType? = nil
        var hostname: String? = nil

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: payload = try reader.decode(Payload.self)
            case 2: username = try reader.decode(String.self)
            case 3: oauth_scope = try reader.decode(String.self)
            case 4: server_id = try reader.decode(String.self)
            case 5: grpclb_route_type = try reader.decode(GrpclbRouteType.self)
            case 6: hostname = try reader.decode(String.self)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.payload = payload
        self.username = try SimpleResponse.checkIfMissing(username, "username")
        self.oauth_scope = try SimpleResponse.checkIfMissing(oauth_scope, "oauth_scope")
        self.server_id = try SimpleResponse.checkIfMissing(server_id, "server_id")
        self.grpclb_route_type = try SimpleResponse.checkIfMissing(grpclb_route_type, "grpclb_route_type")
        self.hostname = try SimpleResponse.checkIfMissing(hostname, "hostname")
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.payload)
        try writer.encode(tag: 2, value: self.username)
        try writer.encode(tag: 3, value: self.oauth_scope)
        try writer.encode(tag: 4, value: self.server_id)
        try writer.encode(tag: 5, value: self.grpclb_route_type)
        try writer.encode(tag: 6, value: self.hostname)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension SimpleResponse : Codable {
    public enum CodingKeys : String, CodingKey {

        case payload
        case username
        case oauth_scope
        case server_id
        case grpclb_route_type
        case hostname

    }
}
#endif
