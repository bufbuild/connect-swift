// Code generated by Wire protocol buffer compiler, do not edit.
// Source: grpc.testing.ReconnectParams in grpc/testing/messages.proto
import Foundation
import Wire

/**
 *  For reconnect interop test only.
 *  Client tells server what reconnection parameters it used.
 */
public struct ReconnectParams {

    public var max_reconnect_backoff_ms: Int32
    public var unknownFields: Data = .init()

    public init(max_reconnect_backoff_ms: Int32) {
        self.max_reconnect_backoff_ms = max_reconnect_backoff_ms
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension ReconnectParams : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension ReconnectParams : Hashable {
}
#endif

extension ReconnectParams : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/grpc.testing.ReconnectParams"
    }
}

extension ReconnectParams : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var max_reconnect_backoff_ms: Int32? = nil

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: max_reconnect_backoff_ms = try reader.decode(Int32.self)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.max_reconnect_backoff_ms = try ReconnectParams.checkIfMissing(max_reconnect_backoff_ms, "max_reconnect_backoff_ms")
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.max_reconnect_backoff_ms)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension ReconnectParams : Codable {
    public enum CodingKeys : String, CodingKey {

        case max_reconnect_backoff_ms

    }
}
#endif
