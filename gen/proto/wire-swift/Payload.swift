// Code generated by Wire protocol buffer compiler, do not edit.
// Source: grpc.testing.Payload in grpc/testing/messages.proto
import Foundation
import Wire

/**
 *  A block of data, to simply increase gRPC message size.
 */
public struct Payload {

    /**
     *  The type of data in body.
     */
    public var type: PayloadType
    /**
     *  Primary contents of payload.
     */
    public var body: Data
    public var unknownFields: Data = .init()

    public init(type: PayloadType, body: Data) {
        self.type = type
        self.body = body
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension Payload : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension Payload : Hashable {
}
#endif

extension Payload : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/grpc.testing.Payload"
    }
}

extension Payload : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var type: PayloadType? = nil
        var body: Data? = nil

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: type = try reader.decode(PayloadType.self)
            case 2: body = try reader.decode(Data.self)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.type = try Payload.checkIfMissing(type, "type")
        self.body = try Payload.checkIfMissing(body, "body")
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.type)
        try writer.encode(tag: 2, value: self.body)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension Payload : Codable {
    public enum CodingKeys : String, CodingKey {

        case type
        case body

    }
}
#endif
