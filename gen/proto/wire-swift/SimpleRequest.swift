// Code generated by Wire protocol buffer compiler, do not edit.
// Source: grpc.testing.SimpleRequest in grpc/testing/messages.proto
import Foundation
import Wire

/**
 *  Unary request.
 */
public struct SimpleRequest {

    /**
     *  Desired payload type in the response from the server.
     *  If response_type is RANDOM, server randomly chooses one from other formats.
     */
    public var response_type: PayloadType
    /**
     *  Desired payload size in the response from the server.
     */
    public var response_size: Int32
    /**
     *  Optional input payload sent along with the request.
     */
    public var payload: Payload?
    /**
     *  Whether SimpleResponse should include username.
     */
    public var fill_username: Bool
    /**
     *  Whether SimpleResponse should include OAuth scope.
     */
    public var fill_oauth_scope: Bool
    /**
     *  Whether to request the server to compress the response. This field is
     *  "nullable" in order to interoperate seamlessly with clients not able to
     *  implement the full compression tests by introspecting the call to verify
     *  the response's compression status.
     */
    public var response_compressed: BoolValue?
    /**
     *  Whether server should return a given status
     */
    public var response_status: EchoStatus?
    /**
     *  Whether the server should expect this request to be compressed.
     */
    public var expect_compressed: BoolValue?
    /**
     *  Whether SimpleResponse should include server_id.
     */
    public var fill_server_id: Bool
    /**
     *  Whether SimpleResponse should include grpclb_route_type.
     */
    public var fill_grpclb_route_type: Bool
    public var unknownFields: Data = .init()

    public init(
        response_type: PayloadType,
        response_size: Int32,
        payload: Payload? = nil,
        fill_username: Bool,
        fill_oauth_scope: Bool,
        response_compressed: BoolValue? = nil,
        response_status: EchoStatus? = nil,
        expect_compressed: BoolValue? = nil,
        fill_server_id: Bool,
        fill_grpclb_route_type: Bool
    ) {
        self.response_type = response_type
        self.response_size = response_size
        self.payload = payload
        self.fill_username = fill_username
        self.fill_oauth_scope = fill_oauth_scope
        self.response_compressed = response_compressed
        self.response_status = response_status
        self.expect_compressed = expect_compressed
        self.fill_server_id = fill_server_id
        self.fill_grpclb_route_type = fill_grpclb_route_type
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension SimpleRequest : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension SimpleRequest : Hashable {
}
#endif

extension SimpleRequest : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/grpc.testing.SimpleRequest"
    }
}

extension SimpleRequest : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var response_type: PayloadType? = nil
        var response_size: Int32? = nil
        var payload: Payload? = nil
        var fill_username: Bool? = nil
        var fill_oauth_scope: Bool? = nil
        var response_compressed: BoolValue? = nil
        var response_status: EchoStatus? = nil
        var expect_compressed: BoolValue? = nil
        var fill_server_id: Bool? = nil
        var fill_grpclb_route_type: Bool? = nil

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: response_type = try reader.decode(PayloadType.self)
            case 2: response_size = try reader.decode(Int32.self)
            case 3: payload = try reader.decode(Payload.self)
            case 4: fill_username = try reader.decode(Bool.self)
            case 5: fill_oauth_scope = try reader.decode(Bool.self)
            case 6: response_compressed = try reader.decode(BoolValue.self)
            case 7: response_status = try reader.decode(EchoStatus.self)
            case 8: expect_compressed = try reader.decode(BoolValue.self)
            case 9: fill_server_id = try reader.decode(Bool.self)
            case 10: fill_grpclb_route_type = try reader.decode(Bool.self)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.response_type = try SimpleRequest.checkIfMissing(response_type, "response_type")
        self.response_size = try SimpleRequest.checkIfMissing(response_size, "response_size")
        self.payload = payload
        self.fill_username = try SimpleRequest.checkIfMissing(fill_username, "fill_username")
        self.fill_oauth_scope = try SimpleRequest.checkIfMissing(fill_oauth_scope, "fill_oauth_scope")
        self.response_compressed = response_compressed
        self.response_status = response_status
        self.expect_compressed = expect_compressed
        self.fill_server_id = try SimpleRequest.checkIfMissing(fill_server_id, "fill_server_id")
        self.fill_grpclb_route_type = try SimpleRequest.checkIfMissing(fill_grpclb_route_type, "fill_grpclb_route_type")
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.response_type)
        try writer.encode(tag: 2, value: self.response_size)
        try writer.encode(tag: 3, value: self.payload)
        try writer.encode(tag: 4, value: self.fill_username)
        try writer.encode(tag: 5, value: self.fill_oauth_scope)
        try writer.encode(tag: 6, value: self.response_compressed)
        try writer.encode(tag: 7, value: self.response_status)
        try writer.encode(tag: 8, value: self.expect_compressed)
        try writer.encode(tag: 9, value: self.fill_server_id)
        try writer.encode(tag: 10, value: self.fill_grpclb_route_type)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension SimpleRequest : Codable {
    public enum CodingKeys : String, CodingKey {

        case response_type
        case response_size
        case payload
        case fill_username
        case fill_oauth_scope
        case response_compressed
        case response_status
        case expect_compressed
        case fill_server_id
        case fill_grpclb_route_type

    }
}
#endif
