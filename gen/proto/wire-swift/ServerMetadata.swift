// Code generated by Wire protocol buffer compiler, do not edit.
// Source: server.v1.ServerMetadata in server/v1/server.proto
import Foundation
import Wire

/**
 *  ServerMetadata is the metadata returned from the server started by the server binary.
 */
public struct ServerMetadata {

    public var host: String
    public var protocols: [ProtocolSupport]
    public var unknownFields: Data = .init()

    public init(host: String, protocols: [ProtocolSupport] = []) {
        self.host = host
        self.protocols = protocols
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension ServerMetadata : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension ServerMetadata : Hashable {
}
#endif

extension ServerMetadata : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/server.v1.ServerMetadata"
    }
}

extension ServerMetadata : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var host: String? = nil
        var protocols: [ProtocolSupport] = []

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: host = try reader.decode(String.self)
            case 2: try reader.decode(into: &protocols)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.host = try ServerMetadata.checkIfMissing(host, "host")
        self.protocols = protocols
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.host)
        try writer.encode(tag: 2, value: self.protocols)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension ServerMetadata : Codable {
    public enum CodingKeys : String, CodingKey {

        case host
        case protocols

    }
}
#endif
