// Code generated by Wire protocol buffer compiler, do not edit.
// Source: server.v1.HTTPVersion in server/v1/server.proto
import Foundation
import Wire

public struct HTTPVersion {

    public var major: Int32
    public var minor: Int32
    public var unknownFields: Data = .init()

    public init(major: Int32, minor: Int32) {
        self.major = major
        self.minor = minor
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension HTTPVersion : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension HTTPVersion : Hashable {
}
#endif

extension HTTPVersion : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/server.v1.HTTPVersion"
    }
}

extension HTTPVersion : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var major: Int32? = nil
        var minor: Int32? = nil

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: major = try reader.decode(Int32.self)
            case 2: minor = try reader.decode(Int32.self)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.major = try HTTPVersion.checkIfMissing(major, "major")
        self.minor = try HTTPVersion.checkIfMissing(minor, "minor")
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.major)
        try writer.encode(tag: 2, value: self.minor)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension HTTPVersion : Codable {
    public enum CodingKeys : String, CodingKey {

        case major
        case minor

    }
}
#endif
