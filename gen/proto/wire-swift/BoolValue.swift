// Code generated by Wire protocol buffer compiler, do not edit.
// Source: grpc.testing.BoolValue in grpc/testing/messages.proto
import Foundation
import Wire

/**
 *  TODO(dgq): Go back to using well-known types once
 *  https://github.com/grpc/grpc/issues/6980 has been fixed.
 *  import "google/protobuf/wrappers.proto";
 */
public struct BoolValue {

    /**
     *  The bool value.
     */
    public var value: Bool
    public var unknownFields: Data = .init()

    public init(value: Bool) {
        self.value = value
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension BoolValue : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension BoolValue : Hashable {
}
#endif

extension BoolValue : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/grpc.testing.BoolValue"
    }
}

extension BoolValue : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var value: Bool? = nil

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: value = try reader.decode(Bool.self)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.value = try BoolValue.checkIfMissing(value, "value")
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.value)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension BoolValue : Codable {
    public enum CodingKeys : String, CodingKey {

        case value

    }
}
#endif
