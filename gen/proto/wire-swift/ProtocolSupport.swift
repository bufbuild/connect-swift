// Code generated by Wire protocol buffer compiler, do not edit.
// Source: server.v1.ProtocolSupport in server/v1/server.proto
import Foundation
import Wire

public struct ProtocolSupport {

    public var `protocol`: Protocol
    public var http_versions: [HTTPVersion]
    public var port: String
    public var unknownFields: Data = .init()

    public init(
        `protocol`: Protocol,
        http_versions: [HTTPVersion] = [],
        port: String
    ) {
        self.`protocol` = `protocol`
        self.http_versions = http_versions
        self.port = port
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension ProtocolSupport : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension ProtocolSupport : Hashable {
}
#endif

extension ProtocolSupport : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/server.v1.ProtocolSupport"
    }
}

extension ProtocolSupport : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var `protocol`: Protocol? = nil
        var http_versions: [HTTPVersion] = []
        var port: String? = nil

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: `protocol` = try reader.decode(Protocol.self)
            case 2: try reader.decode(into: &http_versions)
            case 3: port = try reader.decode(String.self)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.`protocol` = try ProtocolSupport.checkIfMissing(`protocol`, "protocol")
        self.http_versions = http_versions
        self.port = try ProtocolSupport.checkIfMissing(port, "port")
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.`protocol`)
        try writer.encode(tag: 2, value: self.http_versions)
        try writer.encode(tag: 3, value: self.port)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension ProtocolSupport : Codable {
    public enum CodingKeys : String, CodingKey {

        case `protocol`
        case http_versions
        case port

    }
}
#endif
