import SwiftProtobufPluginLibrary

final class ConnectGenerator {
    private let descriptor: FileDescriptor
    private let namer: SwiftProtobufNamer
    private let options: GeneratorOptions
    private var printer = CodePrinter(indent: "    ".unicodeScalars)

    var output: String {
        return self.printer.content
    }

    init(_ descriptor: FileDescriptor, options: GeneratorOptions) {
        self.descriptor = descriptor
        self.options = options
        self.namer = SwiftProtobufNamer(
            currentFile: descriptor,
            protoFileToModuleMappings: options.protoToModuleMappings
        )
        self.printContent()
    }

    // MARK: - Output helpers

    private func indent() {
        self.printer.indent()
    }

    private func outdent() {
        self.printer.outdent()
    }

    private func indent(printLines: () -> Void) {
        self.indent()
        printLines()
        self.outdent()
    }

    private func appendLine(_ line: String = "") {
        self.printer.print(line)
        self.printer.print("\n")
    }

    // MARK: - Output content

    private func modulesToImport() -> [String] {
        let defaults = ["Connect", "Foundation", self.options.swiftProtobufModuleName]
        let extras = self.options.extraModuleImports
        let mappings = self.options.protoToModuleMappings
            .neededModules(forFile: self.descriptor) ?? []
        return (defaults + mappings + extras).sorted()
    }

    private func printContent() {
        self.appendLine("// Code generated by protoc-gen-connect-swift. DO NOT EDIT.")
        self.appendLine("//")
        self.appendLine("// Source: \(self.descriptor.name)")
        self.appendLine("//")
        self.appendLine()

        for module in self.modulesToImport() {
            self.appendLine("import \(module)")
        }
        self.appendLine()

        for service in self.descriptor.services {
            
        }
    }
}
