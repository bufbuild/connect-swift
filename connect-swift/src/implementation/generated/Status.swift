// Code generated by Wire protocol buffer compiler, do not edit.
// Source: grpc.status.v1.Status in grpc/status/v1/status.proto
import Foundation
import Wire

/**
 *  See https://cloud.google.com/apis/design/errors.
 *
 *  This struct must remain binary-compatible with
 *  https://github.com/googleapis/googleapis/blob/master/google/rpc/status.proto.
 */
public struct Status {

    /**
     *  a google.rpc.Code
     */
    public var code: Int32
    /**
     *  developer-facing, English (localize in details or client-side)
     */
    public var message: String
    public var details: [AnyMessage]
    public var unknownFields: Data = .init()

    public init(
        code: Int32,
        message: String,
        details: [AnyMessage] = []
    ) {
        self.code = code
        self.message = message
        self.details = details
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension Status : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension Status : Hashable {
}
#endif

extension Status : ProtoMessage {
    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/grpc.status.v1.Status"
    }
}

extension Status : Proto3Codable {
    public init(from reader: ProtoReader) throws {
        var code: Int32? = nil
        var message: String? = nil
        var details: [AnyMessage] = []

        let token = try reader.beginMessage()
        while let tag = try reader.nextTag(token: token) {
            switch tag {
            case 1: code = try reader.decode(Int32.self)
            case 2: message = try reader.decode(String.self)
            case 3: try reader.decode(into: &details)
            default: try reader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try reader.endMessage(token: token)

        self.code = try Status.checkIfMissing(code, "code")
        self.message = try Status.checkIfMissing(message, "message")
        self.details = details
    }

    public func encode(to writer: ProtoWriter) throws {
        try writer.encode(tag: 1, value: self.code)
        try writer.encode(tag: 2, value: self.message)
        try writer.encode(tag: 3, value: self.details)
        try writer.writeUnknownFields(unknownFields)
    }
}

#if !WIRE_REMOVE_CODABLE
extension Status : Codable {
    public enum CodingKeys : String, CodingKey {

        case code
        case message
        case details

    }
}
#endif
